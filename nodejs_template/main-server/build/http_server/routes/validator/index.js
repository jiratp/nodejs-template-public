"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ajv = _interopRequireDefault(require("ajv"));

var _v = _interopRequireDefault(require("./json_schema/v1"));

/**
 * Copyright (c) 2018, 2019 ChibCha COMPANY LIMITED
 *
 */
const ajvOptions = {
  allErrors: true
};
const ajv = new _ajv.default(ajvOptions);

function validate({
  edocApi,
  apiVersion,
  method,
  path,
  params,
  query,
  body
}) {
  let data;
  let dataType;

  if (typeof params === 'object') {
    data = params;
    dataType = 'params';
  } else if (typeof query === 'object') {
    data = query;
    dataType = 'query';
  } else if (typeof body === 'object') {
    data = body;
    dataType = 'body';
  }

  ajv.removeSchema('defs');

  if (!edocApi) {
    if (apiVersion === 1) {
      ajv.addSchema(_v.default.defsSchema, 'defs');
    }
  }

  const jsonSchema = getJSONSchema(edocApi, apiVersion, method, path, dataType);
  const validate = ajv.compile(jsonSchema);
  const valid = validate(data);
  return {
    valid,
    errors: validate.errors
  };
}

function getJSONSchema(edocApi, apiVersion, method, path, dataType) {
  try {
    if (!edocApi) {
      if (apiVersion === 1) {
        return _v.default[method][path][dataType];
      }
    }

    throw new Error('Cannot find JSON schema apiVersion for validation');
  } catch (error) {
    throw new Error('Cannot find JSON schema for validation');
  }
}

var _default = validate;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9odHRwX3NlcnZlci9yb3V0ZXMvdmFsaWRhdG9yL2luZGV4LmpzIl0sIm5hbWVzIjpbImFqdk9wdGlvbnMiLCJhbGxFcnJvcnMiLCJhanYiLCJBanYiLCJ2YWxpZGF0ZSIsImVkb2NBcGkiLCJhcGlWZXJzaW9uIiwibWV0aG9kIiwicGF0aCIsInBhcmFtcyIsInF1ZXJ5IiwiYm9keSIsImRhdGEiLCJkYXRhVHlwZSIsInJlbW92ZVNjaGVtYSIsImFkZFNjaGVtYSIsInNjaGVtYXNWMSIsImRlZnNTY2hlbWEiLCJqc29uU2NoZW1hIiwiZ2V0SlNPTlNjaGVtYSIsImNvbXBpbGUiLCJ2YWxpZCIsImVycm9ycyIsIkVycm9yIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBOztBQUVBOztBQU5BOzs7O0FBUUEsTUFBTUEsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxTQUFTLEVBQUU7QUFETSxDQUFuQjtBQUlBLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxZQUFKLENBQVFILFVBQVIsQ0FBWjs7QUFFQSxTQUFTSSxRQUFULENBQWtCO0FBQUVDLEVBQUFBLE9BQUY7QUFBV0MsRUFBQUEsVUFBWDtBQUF1QkMsRUFBQUEsTUFBdkI7QUFBK0JDLEVBQUFBLElBQS9CO0FBQXFDQyxFQUFBQSxNQUFyQztBQUE2Q0MsRUFBQUEsS0FBN0M7QUFBb0RDLEVBQUFBO0FBQXBELENBQWxCLEVBQThFO0FBQzFFLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxRQUFKOztBQUNBLE1BQUksT0FBT0osTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QkcsSUFBQUEsSUFBSSxHQUFHSCxNQUFQO0FBQ0FJLElBQUFBLFFBQVEsR0FBRyxRQUFYO0FBQ0QsR0FIRCxNQUdPLElBQUksT0FBT0gsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUNwQ0UsSUFBQUEsSUFBSSxHQUFHRixLQUFQO0FBQ0FHLElBQUFBLFFBQVEsR0FBRyxPQUFYO0FBQ0QsR0FITSxNQUdBLElBQUksT0FBT0YsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUNuQ0MsSUFBQUEsSUFBSSxHQUFHRCxJQUFQO0FBQ0FFLElBQUFBLFFBQVEsR0FBRyxNQUFYO0FBQ0Q7O0FBRURYLEVBQUFBLEdBQUcsQ0FBQ1ksWUFBSixDQUFpQixNQUFqQjs7QUFFQSxNQUFJLENBQUNULE9BQUwsRUFBYztBQUNaLFFBQUlDLFVBQVUsS0FBSyxDQUFuQixFQUFzQjtBQUNwQkosTUFBQUEsR0FBRyxDQUFDYSxTQUFKLENBQWNDLFdBQVVDLFVBQXhCLEVBQW9DLE1BQXBDO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNQyxVQUFVLEdBQUdDLGFBQWEsQ0FBQ2QsT0FBRCxFQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsSUFBOUIsRUFBb0NLLFFBQXBDLENBQWhDO0FBQ0EsUUFBTVQsUUFBUSxHQUFHRixHQUFHLENBQUNrQixPQUFKLENBQVlGLFVBQVosQ0FBakI7QUFDQSxRQUFNRyxLQUFLLEdBQUdqQixRQUFRLENBQUNRLElBQUQsQ0FBdEI7QUFFQSxTQUFPO0FBQ0xTLElBQUFBLEtBREs7QUFFTEMsSUFBQUEsTUFBTSxFQUFFbEIsUUFBUSxDQUFDa0I7QUFGWixHQUFQO0FBSUQ7O0FBRUQsU0FBU0gsYUFBVCxDQUF1QmQsT0FBdkIsRUFBZ0NDLFVBQWhDLEVBQTRDQyxNQUE1QyxFQUFvREMsSUFBcEQsRUFBMERLLFFBQTFELEVBQW9FO0FBQ2xFLE1BQUk7QUFDQSxRQUFJLENBQUNSLE9BQUwsRUFBYztBQUNaLFVBQUlDLFVBQVUsS0FBSyxDQUFuQixFQUFzQjtBQUNwQixlQUFPVSxXQUFVVCxNQUFWLEVBQWtCQyxJQUFsQixFQUF3QkssUUFBeEIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsVUFBTSxJQUFJVSxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNILEdBUkQsQ0FRRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxVQUFNLElBQUlELEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7QUFDRjs7ZUFFY25CLFEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCwgMjAxOSBDaGliQ2hhIENPTVBBTlkgTElNSVRFRFxuICpcbiAqL1xuaW1wb3J0IEFqdiBmcm9tICdhanYnO1xuXG5pbXBvcnQgc2NoZW1hc1YxIGZyb20gJy4vanNvbl9zY2hlbWEvdjEnO1xuXG5jb25zdCBhanZPcHRpb25zID0ge1xuICBhbGxFcnJvcnM6IHRydWUsXG59O1xuXG5jb25zdCBhanYgPSBuZXcgQWp2KGFqdk9wdGlvbnMpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh7IGVkb2NBcGksIGFwaVZlcnNpb24sIG1ldGhvZCwgcGF0aCwgcGFyYW1zLCBxdWVyeSwgYm9keSB9KSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGRhdGFUeXBlO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgZGF0YSA9IHBhcmFtcztcbiAgICAgIGRhdGFUeXBlID0gJ3BhcmFtcyc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBkYXRhID0gcXVlcnk7XG4gICAgICBkYXRhVHlwZSA9ICdxdWVyeSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGRhdGEgPSBib2R5O1xuICAgICAgZGF0YVR5cGUgPSAnYm9keSc7XG4gICAgfVxuXG4gICAgYWp2LnJlbW92ZVNjaGVtYSgnZGVmcycpO1xuICBcbiAgICBpZiAoIWVkb2NBcGkpIHtcbiAgICAgIGlmIChhcGlWZXJzaW9uID09PSAxKSB7XG4gICAgICAgIGFqdi5hZGRTY2hlbWEoc2NoZW1hc1YxLmRlZnNTY2hlbWEsICdkZWZzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QganNvblNjaGVtYSA9IGdldEpTT05TY2hlbWEoZWRvY0FwaSwgYXBpVmVyc2lvbiwgbWV0aG9kLCBwYXRoLCBkYXRhVHlwZSk7XG4gICAgY29uc3QgdmFsaWRhdGUgPSBhanYuY29tcGlsZShqc29uU2NoZW1hKTtcbiAgICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlKGRhdGEpO1xuICBcbiAgICByZXR1cm4ge1xuICAgICAgdmFsaWQsXG4gICAgICBlcnJvcnM6IHZhbGlkYXRlLmVycm9ycyxcbiAgICB9O1xuICB9XG4gIFxuICBmdW5jdGlvbiBnZXRKU09OU2NoZW1hKGVkb2NBcGksIGFwaVZlcnNpb24sIG1ldGhvZCwgcGF0aCwgZGF0YVR5cGUpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWVkb2NBcGkpIHtcbiAgICAgICAgICBpZiAoYXBpVmVyc2lvbiA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYXNWMVttZXRob2RdW3BhdGhdW2RhdGFUeXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIEpTT04gc2NoZW1hIGFwaVZlcnNpb24gZm9yIHZhbGlkYXRpb24nKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBKU09OIHNjaGVtYSBmb3IgdmFsaWRhdGlvbicpO1xuICAgIH1cbiAgfVxuICBcbiAgZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7Il19