"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = errorHandler;
exports.bodyParserErrorHandler = bodyParserErrorHandler;

var _logger = _interopRequireDefault(require("../../../logger"));

var _type = _interopRequireDefault(require("service-error/type"));

var _error = require("../../../utils/error");

var _config = require("../../../config");

/**
 * Copyright (c) 2018, 2019 ChibCha COMPANY LIMITED
 *
 */
function errorHandler(err, req, res, next) {
  if (res.headersSent) {
    return next(err);
  }

  let clientError;
  let unauthorizedError;

  if (err.name === 'CustomError') {
    clientError = err.isRootCauseClientError();
  }

  const responseBody = {
    error: (0, _error.getErrorObjectForClient)(err)
  };

  if (unauthorizedError) {
    res.status(403).json(responseBody);

    _logger.default.error({
      message: 'Responded Unauthorized with HTTP code 403',
      responseBody
    });
  } else if (clientError === true) {
    if (err.getCode() === _type.default.QUERY_STRING_VALIDATION_FAILED.code || err.getCode() === _type.default.BODY_VALIDATION_FAILED.code) {
      responseBody.details = err.details;
    }

    if (err.getCode() === _type.default.DATA_VALIDATION_FAILED.code) {
      responseBody.details = err.getDetailsOfErrorWithCode();
    }

    res.status(_config.clientHttpErrorCode).json(responseBody);

    _logger.default.error({
      message: `Responded Bad Request with HTTP code ${_config.clientHttpErrorCode}`,
      responseBody
    });
  } else {
    res.status(_config.serverHttpErrorCode).json(responseBody);

    _logger.default.error({
      message: `Responded Internal Server Error with HTTP code ${_config.serverHttpErrorCode}`,
      responseBody
    });
  }
}

function bodyParserErrorHandler(err, req, res, next) {
  if (res.headersSent) {
    return next(err);
  }

  let errorCode;
  let errorMessage;
  let clientError;

  if (err) {
    if (err.type == 'entity.parse.failed') {
      errorCode = _type.default.BODY_PARSE_FAILED.code;
      errorMessage = _type.default.BODY_PARSE_FAILED.message;
      clientError = true;
    } else if (err.type == 'entity.too.large') {
      errorCode = _type.default.BODY_TOO_LARGE.code;
      errorMessage = _type.default.BODY_TOO_LARGE.message;
      clientError = true;
    } else {
      errorCode = _type.default.BODY_PARSER_ERROR.code;
      errorMessage = `${_type.default.BODY_PARSER_ERROR.message}: ${err.message}`;
    }

    if (clientError) {
      const responseBody = {
        error: {
          code: errorCode,
          message: errorMessage
        }
      };
      res.status(_config.clientHttpErrorCode).json(responseBody);

      _logger.default.error({
        message: `Responded Bad Request with HTTP code ${_config.clientHttpErrorCode}`,
        responseBody
      });
    } else {
      const responseBody = {
        error: {
          code: errorCode,
          message: errorMessage,
          stack: _config.env === 'development' ? err.stack : undefined
        }
      };
      res.status(_config.serverHttpErrorCode).json(responseBody);

      _logger.default.error({
        message: `Responded Internal Server Error with HTTP code ${_config.serverHttpErrorCode}`,
        responseBody
      });
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,