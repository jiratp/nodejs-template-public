"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateQuery = validateQuery;
exports.validateBody = validateBody;

var _validator = _interopRequireDefault(require("../validator"));

var _custom_error = _interopRequireDefault(require("service-error/custom_error"));

var _type = _interopRequireDefault(require("service-error/type"));

/**
 * Copyright (c) 2018, 2019 ChibCha COMPANY LIMITED
 *
 */
function getBaseUrlAndApiVersion(req) {
  let baseUrl = req.baseUrl;

  if (baseUrl.startsWith('/edoc')) {
    return {
      edocApi: true,
      baseUrl
    };
  }

  const matchedPath = baseUrl.match(/^\/v([0-9]+)/);
  let apiVersion;

  if (matchedPath != null) {
    const splittedBaseUrl = baseUrl.split('/');
    splittedBaseUrl.splice(1, 1);
    baseUrl = splittedBaseUrl.join('/');
    apiVersion = parseInt(matchedPath[1]);
  } else {
    apiVersion = 2;
  }

  return {
    baseUrl,
    apiVersion
  };
}

function validateQuery(req, res, next) {
  const {
    baseUrl,
    apiVersion
  } = getBaseUrlAndApiVersion(req);
  const queryValidationResult = (0, _validator.default)({
    apiVersion,
    method: req.method,
    path: `${baseUrl}${req.route.path}`,
    query: req.query
  });

  if (!queryValidationResult.valid) {
    next(new _custom_error.default({
      errorType: _type.default.QUERY_STRING_VALIDATION_FAILED,
      details: queryValidationResult
    }));
    return;
  }

  next();
}

function validateBody(req, res, next) {
  const {
    edocApi,
    baseUrl,
    apiVersion
  } = getBaseUrlAndApiVersion(req);
  const bodyValidationResult = (0, _validator.default)({
    edocApi,
    apiVersion,
    method: req.method,
    path: `${baseUrl}${req.route.path}`,
    body: req.body
  });

  if (!bodyValidationResult.valid) {
    next(new _custom_error.default({
      errorType: _type.default.BODY_VALIDATION_FAILED,
      details: bodyValidationResult
    }));
    return;
  }

  next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9odHRwX3NlcnZlci9yb3V0ZXMvbWlkZGxld2FyZS92YWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbImdldEJhc2VVcmxBbmRBcGlWZXJzaW9uIiwicmVxIiwiYmFzZVVybCIsInN0YXJ0c1dpdGgiLCJlZG9jQXBpIiwibWF0Y2hlZFBhdGgiLCJtYXRjaCIsImFwaVZlcnNpb24iLCJzcGxpdHRlZEJhc2VVcmwiLCJzcGxpdCIsInNwbGljZSIsImpvaW4iLCJwYXJzZUludCIsInZhbGlkYXRlUXVlcnkiLCJyZXMiLCJuZXh0IiwicXVlcnlWYWxpZGF0aW9uUmVzdWx0IiwibWV0aG9kIiwicGF0aCIsInJvdXRlIiwicXVlcnkiLCJ2YWxpZCIsIkN1c3RvbUVycm9yIiwiZXJyb3JUeXBlIiwiUVVFUllfU1RSSU5HX1ZBTElEQVRJT05fRkFJTEVEIiwiZGV0YWlscyIsInZhbGlkYXRlQm9keSIsImJvZHlWYWxpZGF0aW9uUmVzdWx0IiwiYm9keSIsIkJPRFlfVkFMSURBVElPTl9GQUlMRUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFJQTs7QUFFQTs7QUFDQTs7QUFQQTs7OztBQVNBLFNBQVNBLHVCQUFULENBQWlDQyxHQUFqQyxFQUFzQztBQUNwQyxNQUFJQyxPQUFPLEdBQUdELEdBQUcsQ0FBQ0MsT0FBbEI7O0FBQ0EsTUFBSUEsT0FBTyxDQUFDQyxVQUFSLENBQW1CLE9BQW5CLENBQUosRUFBaUM7QUFDL0IsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsSUFESjtBQUVMRixNQUFBQTtBQUZLLEtBQVA7QUFJRDs7QUFDRCxRQUFNRyxXQUFXLEdBQUdILE9BQU8sQ0FBQ0ksS0FBUixDQUFjLGNBQWQsQ0FBcEI7QUFDQSxNQUFJQyxVQUFKOztBQUNBLE1BQUlGLFdBQVcsSUFBSSxJQUFuQixFQUF5QjtBQUN2QixVQUFNRyxlQUFlLEdBQUdOLE9BQU8sQ0FBQ08sS0FBUixDQUFjLEdBQWQsQ0FBeEI7QUFDQUQsSUFBQUEsZUFBZSxDQUFDRSxNQUFoQixDQUF1QixDQUF2QixFQUEwQixDQUExQjtBQUNBUixJQUFBQSxPQUFPLEdBQUdNLGVBQWUsQ0FBQ0csSUFBaEIsQ0FBcUIsR0FBckIsQ0FBVjtBQUNBSixJQUFBQSxVQUFVLEdBQUdLLFFBQVEsQ0FBQ1AsV0FBVyxDQUFDLENBQUQsQ0FBWixDQUFyQjtBQUNELEdBTEQsTUFLTztBQUNMRSxJQUFBQSxVQUFVLEdBQUcsQ0FBYjtBQUNEOztBQUNELFNBQU87QUFDTEwsSUFBQUEsT0FESztBQUVMSyxJQUFBQTtBQUZLLEdBQVA7QUFJRDs7QUFFTSxTQUFTTSxhQUFULENBQXVCWixHQUF2QixFQUE0QmEsR0FBNUIsRUFBaUNDLElBQWpDLEVBQXVDO0FBQzVDLFFBQU07QUFBRWIsSUFBQUEsT0FBRjtBQUFXSyxJQUFBQTtBQUFYLE1BQTBCUCx1QkFBdUIsQ0FBQ0MsR0FBRCxDQUF2RDtBQUNBLFFBQU1lLHFCQUFxQixHQUFHLHdCQUFTO0FBQ3JDVCxJQUFBQSxVQURxQztBQUVyQ1UsSUFBQUEsTUFBTSxFQUFFaEIsR0FBRyxDQUFDZ0IsTUFGeUI7QUFHckNDLElBQUFBLElBQUksRUFBRyxHQUFFaEIsT0FBUSxHQUFFRCxHQUFHLENBQUNrQixLQUFKLENBQVVELElBQUssRUFIRztBQUlyQ0UsSUFBQUEsS0FBSyxFQUFFbkIsR0FBRyxDQUFDbUI7QUFKMEIsR0FBVCxDQUE5Qjs7QUFNQSxNQUFJLENBQUNKLHFCQUFxQixDQUFDSyxLQUEzQixFQUFrQztBQUNoQ04sSUFBQUEsSUFBSSxDQUNGLElBQUlPLHFCQUFKLENBQWdCO0FBQ2RDLE1BQUFBLFNBQVMsRUFBRUEsY0FBVUMsOEJBRFA7QUFFZEMsTUFBQUEsT0FBTyxFQUFFVDtBQUZLLEtBQWhCLENBREUsQ0FBSjtBQU1BO0FBQ0Q7O0FBQ0RELEVBQUFBLElBQUk7QUFDTDs7QUFFTSxTQUFTVyxZQUFULENBQXNCekIsR0FBdEIsRUFBMkJhLEdBQTNCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUMzQyxRQUFNO0FBQUVYLElBQUFBLE9BQUY7QUFBV0YsSUFBQUEsT0FBWDtBQUFvQkssSUFBQUE7QUFBcEIsTUFBbUNQLHVCQUF1QixDQUFDQyxHQUFELENBQWhFO0FBQ0EsUUFBTTBCLG9CQUFvQixHQUFHLHdCQUFTO0FBQ3BDdkIsSUFBQUEsT0FEb0M7QUFFcENHLElBQUFBLFVBRm9DO0FBR3BDVSxJQUFBQSxNQUFNLEVBQUVoQixHQUFHLENBQUNnQixNQUh3QjtBQUlwQ0MsSUFBQUEsSUFBSSxFQUFHLEdBQUVoQixPQUFRLEdBQUVELEdBQUcsQ0FBQ2tCLEtBQUosQ0FBVUQsSUFBSyxFQUpFO0FBS3BDVSxJQUFBQSxJQUFJLEVBQUUzQixHQUFHLENBQUMyQjtBQUwwQixHQUFULENBQTdCOztBQU9BLE1BQUksQ0FBQ0Qsb0JBQW9CLENBQUNOLEtBQTFCLEVBQWlDO0FBQy9CTixJQUFBQSxJQUFJLENBQ0YsSUFBSU8scUJBQUosQ0FBZ0I7QUFDZEMsTUFBQUEsU0FBUyxFQUFFQSxjQUFVTSxzQkFEUDtBQUVkSixNQUFBQSxPQUFPLEVBQUVFO0FBRkssS0FBaEIsQ0FERSxDQUFKO0FBTUE7QUFDRDs7QUFDRFosRUFBQUEsSUFBSTtBQUNMIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgsIDIwMTkgQ2hpYkNoYSBDT01QQU5ZIExJTUlURURcbiAqXG4gKi9cbmltcG9ydCB2YWxpZGF0ZSBmcm9tICcuLi92YWxpZGF0b3InO1xuXG5pbXBvcnQgQ3VzdG9tRXJyb3IgZnJvbSAnc2VydmljZS1lcnJvci9jdXN0b21fZXJyb3InO1xuaW1wb3J0IGVycm9yVHlwZSBmcm9tICdzZXJ2aWNlLWVycm9yL3R5cGUnO1xuXG5mdW5jdGlvbiBnZXRCYXNlVXJsQW5kQXBpVmVyc2lvbihyZXEpIHtcbiAgbGV0IGJhc2VVcmwgPSByZXEuYmFzZVVybDtcbiAgaWYgKGJhc2VVcmwuc3RhcnRzV2l0aCgnL2Vkb2MnKSkge1xuICAgIHJldHVybiB7XG4gICAgICBlZG9jQXBpOiB0cnVlLFxuICAgICAgYmFzZVVybCxcbiAgICB9O1xuICB9XG4gIGNvbnN0IG1hdGNoZWRQYXRoID0gYmFzZVVybC5tYXRjaCgvXlxcL3YoWzAtOV0rKS8pO1xuICBsZXQgYXBpVmVyc2lvbjtcbiAgaWYgKG1hdGNoZWRQYXRoICE9IG51bGwpIHtcbiAgICBjb25zdCBzcGxpdHRlZEJhc2VVcmwgPSBiYXNlVXJsLnNwbGl0KCcvJyk7XG4gICAgc3BsaXR0ZWRCYXNlVXJsLnNwbGljZSgxLCAxKTtcbiAgICBiYXNlVXJsID0gc3BsaXR0ZWRCYXNlVXJsLmpvaW4oJy8nKTtcbiAgICBhcGlWZXJzaW9uID0gcGFyc2VJbnQobWF0Y2hlZFBhdGhbMV0pO1xuICB9IGVsc2Uge1xuICAgIGFwaVZlcnNpb24gPSAyO1xuICB9XG4gIHJldHVybiB7XG4gICAgYmFzZVVybCxcbiAgICBhcGlWZXJzaW9uLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVRdWVyeShyZXEsIHJlcywgbmV4dCkge1xuICBjb25zdCB7IGJhc2VVcmwsIGFwaVZlcnNpb24gfSA9IGdldEJhc2VVcmxBbmRBcGlWZXJzaW9uKHJlcSk7XG4gIGNvbnN0IHF1ZXJ5VmFsaWRhdGlvblJlc3VsdCA9IHZhbGlkYXRlKHtcbiAgICBhcGlWZXJzaW9uLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBwYXRoOiBgJHtiYXNlVXJsfSR7cmVxLnJvdXRlLnBhdGh9YCxcbiAgICBxdWVyeTogcmVxLnF1ZXJ5LFxuICB9KTtcbiAgaWYgKCFxdWVyeVZhbGlkYXRpb25SZXN1bHQudmFsaWQpIHtcbiAgICBuZXh0KFxuICAgICAgbmV3IEN1c3RvbUVycm9yKHtcbiAgICAgICAgZXJyb3JUeXBlOiBlcnJvclR5cGUuUVVFUllfU1RSSU5HX1ZBTElEQVRJT05fRkFJTEVELFxuICAgICAgICBkZXRhaWxzOiBxdWVyeVZhbGlkYXRpb25SZXN1bHQsXG4gICAgICB9KVxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIG5leHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQm9keShyZXEsIHJlcywgbmV4dCkge1xuICBjb25zdCB7IGVkb2NBcGksIGJhc2VVcmwsIGFwaVZlcnNpb24gfSA9IGdldEJhc2VVcmxBbmRBcGlWZXJzaW9uKHJlcSk7XG4gIGNvbnN0IGJvZHlWYWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdGUoe1xuICAgIGVkb2NBcGksXG4gICAgYXBpVmVyc2lvbixcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgcGF0aDogYCR7YmFzZVVybH0ke3JlcS5yb3V0ZS5wYXRofWAsXG4gICAgYm9keTogcmVxLmJvZHksXG4gIH0pO1xuICBpZiAoIWJvZHlWYWxpZGF0aW9uUmVzdWx0LnZhbGlkKSB7XG4gICAgbmV4dChcbiAgICAgIG5ldyBDdXN0b21FcnJvcih7XG4gICAgICAgIGVycm9yVHlwZTogZXJyb3JUeXBlLkJPRFlfVkFMSURBVElPTl9GQUlMRUQsXG4gICAgICAgIGRldGFpbHM6IGJvZHlWYWxpZGF0aW9uUmVzdWx0LFxuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBuZXh0KCk7XG59Il19