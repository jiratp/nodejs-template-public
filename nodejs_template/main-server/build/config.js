"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callbackRetryTimeout = exports.saltLength = exports.zkRandomLengthForIdp = exports.challengeLength = exports.masterPrivateKeyPassphrase = exports.masterPrivateKeyPath = exports.privateKeyPassphrase = exports.privateKeyPath = exports.useExternalCryptoService = exports.registerMqAtStartup = exports.mqServiceServerPort = exports.mqServiceServerIp = exports.mqPort = exports.mqIp = exports.ndidNode = exports.nodeId = exports.replaceForTooLongLog = exports.logLengthThreshold = exports.logDirectoryPath = exports.logOneLine = exports.logColor = exports.logTarget = exports.logFormat = exports.logLevel = exports.dataDirectoryPath = exports.dbPassword = exports.dbPort = exports.dbIp = exports.serverHttpErrorCode = exports.clientHttpErrorCode = exports.httpsCertPath = exports.httpsKeyPath = exports.https = exports.env = void 0;

var _path = _interopRequireDefault(require("path"));

/**
 * Copyright (c) 2018, 2019 ChibCha COMPANY LIMITED
 *
 */
const env = process.env.NODE_ENV || 'development'; //allow self signed https callback

exports.env = env;
if (env === 'development') process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
const https = process.env.HTTPS === 'true';
exports.https = https;
const httpsKeyPath = process.env.HTTPS_KEY_PATH != null ? process.env.HTTPS_KEY_PATH : _path.default.join(__dirname, '..', 'dev_https_key', 'key.pem');
exports.httpsKeyPath = httpsKeyPath;
const httpsCertPath = process.env.HTTPS_CERT_PATH != null ? process.env.HTTPS_CERT_PATH : _path.default.join(__dirname, '..', 'dev_https_key', 'cert.pem');
exports.httpsCertPath = httpsCertPath;
const clientHttpErrorCode = process.env.CLIENT_HTTP_ERROR_CODE || 400;
exports.clientHttpErrorCode = clientHttpErrorCode;
const serverHttpErrorCode = process.env.SERVER_HTTP_ERROR_CODE || 500;
exports.serverHttpErrorCode = serverHttpErrorCode;
const dbIp = process.env.DB_IP || 'localhost';
exports.dbIp = dbIp;
const dbPort = process.env.DB_PORT || 6379;
exports.dbPort = dbPort;
const dbPassword = process.env.DB_PASSWORD;
exports.dbPassword = dbPassword;

const dataDirectoryPath = process.env.DATA_DIRECTORY_PATH || _path.default.join(__dirname, '..', 'data');

exports.dataDirectoryPath = dataDirectoryPath;
const logLevel = process.env.LOG_LEVEL || (env === 'development' ? 'debug' : 'info');
exports.logLevel = logLevel;
const logFormat = process.env.LOG_FORMAT || 'default';
exports.logFormat = logFormat;
const logTarget = process.env.LOG_TARGET || 'console';
exports.logTarget = logTarget;
const logColor = process.env.LOG_COLOR == null ? logTarget === 'console' : process.env.LOG_COLOR === 'true';
exports.logColor = logColor;
const logOneLine = process.env.LOG_ONE_LINE === 'true';
exports.logOneLine = logOneLine;

const logDirectoryPath = process.env.LOG_DIRECTORY_PATH || _path.default.join(__dirname, '..', 'log');

exports.logDirectoryPath = logDirectoryPath;
const logLengthThreshold = Infinity; // 2000

exports.logLengthThreshold = logLengthThreshold;
const replaceForTooLongLog = '<--- Too long, omitted --->';
exports.replaceForTooLongLog = replaceForTooLongLog;
const nodeId = process.env.NODE_ID;
exports.nodeId = nodeId;
const ndidNode = process.env.NDID_NODE === 'true';
exports.ndidNode = ndidNode;
const defaultMqBindingPort = 5555;
const mqIp = process.env.MQ_CONTACT_IP || 'localhost';
exports.mqIp = mqIp;
const mqPort = process.env.MQ_BINDING_PORT == null ? defaultMqBindingPort : parseInt(process.env.MQ_BINDING_PORT);
exports.mqPort = mqPort;
const mqServiceServerIp = process.env.MQ_SERVICE_SERVER_IP || 'localhost';
exports.mqServiceServerIp = mqServiceServerIp;
const mqServiceServerPort = process.env.MQ_SERVICE_SERVER_PORT ? parseInt(process.env.MQ_SERVICE_SERVER_PORT) : 50051;
exports.mqServiceServerPort = mqServiceServerPort;
const registerMqAtStartup = process.env.REGISTER_MQ_AT_STARTUP != null ? process.env.REGISTER_MQ_AT_STARTUP === 'true' : true;
exports.registerMqAtStartup = registerMqAtStartup;
const useExternalCryptoService = process.env.USE_EXTERNAL_CRYPTO_SERVICE === 'true';
exports.useExternalCryptoService = useExternalCryptoService;
const privateKeyPath = useExternalCryptoService ? null : process.env.PRIVATE_KEY_PATH == null && env === 'development' ? _path.default.join(__dirname, '..', 'dev_key', 'keys', nodeId) : process.env.PRIVATE_KEY_PATH;
exports.privateKeyPath = privateKeyPath;
const privateKeyPassphrase = useExternalCryptoService ? null : process.env.PRIVATE_KEY_PASSPHRASE;
exports.privateKeyPassphrase = privateKeyPassphrase;
const masterPrivateKeyPath = useExternalCryptoService ? null : process.env.MASTER_PRIVATE_KEY_PATH == null && env === 'development' ? _path.default.join(__dirname, '..', 'dev_key', 'master_keys', nodeId + '_master') : process.env.MASTER_PRIVATE_KEY_PATH;
exports.masterPrivateKeyPath = masterPrivateKeyPath;
const masterPrivateKeyPassphrase = useExternalCryptoService ? null : process.env.MASTER_PRIVATE_KEY_PASSPHRASE; //in byte

exports.masterPrivateKeyPassphrase = masterPrivateKeyPassphrase;
const challengeLength = 2;
exports.challengeLength = challengeLength;
const zkRandomLengthForIdp = 128;
exports.zkRandomLengthForIdp = zkRandomLengthForIdp;
const saltLength = 16; // Callback retry timeout in seconds

exports.saltLength = saltLength;
const callbackRetryTimeout = process.env.CALLBACK_RETRY_TIMEOUT == null ? 600 : parseInt(process.env.CALLBACK_RETRY_TIMEOUT);
exports.callbackRetryTimeout = callbackRetryTimeout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,